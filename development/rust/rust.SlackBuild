#!/bin/sh

# Slackware build script for rust

# Copyright 2017 Andrew Clemons, Wellington New Zealand
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=rust
SRCNAM="$PRGNAM"c
VERSION=${VERSION:-1.16.0}
RSTAGE0_VERSION=${RSTAGE0_VERSION:-1.15.1}
RSTAGE0_DIR=${RSTAGE0_DIR:-2017-02-09}
CSTAGE0_VERSION=${CSTAGE0_VERSION:-nightly}
CSTAGE0_DIR=${CSTAGE0_DIR:-6e0c18cccc8b0c06fba8a8d76486f81a792fb420}
BUILD=${BUILD:-2}
TAG=${TAG:-_SBo}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i686) ARCH=i686 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  echo "$ARCH is unsupported"
  exit 1
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $SRCNAM-$VERSION-src
tar xvf $CWD/$SRCNAM-$VERSION-src.tar.gz
cd $SRCNAM-$VERSION-src

# if you already have rust and cargo installed, you can bootstrap from the
# previous version.
if [ "$LOCAL_BOOTSTRAP" = "" ] && [ -x /usr/bin/cargo ] && [ -x /usr/bin/rustc ] ; then
  LOCAL_BOOTSTRAP=yes
fi

if [ "$LOCAL_BOOTSTRAP" != "yes" ] ; then
  # rust requires bootstrapping with the previous rust version.
  # versions are defined in src/stage0.txt
  mkdir -p build/cache/$RSTAGE0_DIR
  cp $CWD/$PRGNAM-std-$RSTAGE0_VERSION-$ARCH-unknown-linux-gnu.tar.gz \
     $CWD/$SRCNAM-$RSTAGE0_VERSION-$ARCH-unknown-linux-gnu.tar.gz \
     build/cache/$RSTAGE0_DIR

  mkdir -p build/cache/$CSTAGE0_DIR
  cp $CWD/cargo-$CSTAGE0_VERSION-$ARCH-unknown-linux-gnu.tar.gz build/cache/$CSTAGE0_DIR
fi

# src/bootstrap/config.toml.example
cat <<EOF > config.toml
[build]
vendor = true
extended = false
submodules = false

[install]
prefix = "$PKG/usr"
libdir = "lib$LIBDIRSUFFIX"
mandir = "man"

[rust]
channel = "stable"
rpath = false
codegen-tests = false

[target.$ARCH-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"
# build fails using the system jemalloc
# jemalloc = "/usr/lib$LIBDIRSUFFIX/libjemalloc_pic.a"
EOF

if [ "$LOCAL_BOOTSTRAP" = "yes" ] ; then
  sed -i "s|^\(vendor = true\)$|\1\nrustc = \"/usr/bin/rustc\"\ncargo = \"/usr/bin/cargo\"|" config.toml
fi

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"
export CC=clang
export CXX=clang++

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
python x.py build --verbose

python x.py dist --verbose

for dist in rustc rust-std rust-docs ; do
  mkdir unpack
  (
    cd unpack

    tar xvf ../build/dist/$dist-$VERSION-$ARCH-unknown-linux-gnu.tar.gz

    cd $dist-$VERSION-$ARCH-unknown-linux-gnu
    ./install.sh --prefix="$PKG/usr" --mandir="$PKG/usr/man"
  )
  rm -rf unpack
done

if [ "$ARCH" = "x86_64" ]; then
  mv $PKG/usr/lib $PKG/usr/lib$LIBDIRSUFFIX
fi

mv $PKG/usr/share/doc $PKG/usr/

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a *.md COPYRIGHT LICENSE-APACHE LICENSE-MIT $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
